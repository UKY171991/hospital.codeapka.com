Doctor API - patho_api/doctor.php

Base URL:
https://hospital.codeapka.com/umakant/patho_api/doctor.php

Supported actions: list, get, save, delete

Summary of important behavior (current implementation):
- Authentication accepted:
  - Session cookie (PHPSESSID)
  - Bearer token via Authorization: Bearer <api_token> (users.api_token)
  - api_key request parameter
  - username/password in the same request (form-data or JSON) as a credential fallback
  - Shared secret via X-Api-Key header or secret_key param (server-to-server)
  - If no authenticated user is found, the API will still allow inserts but `added_by` will fall back to the configured `PATHO_API_DEFAULT_USER_ID` (if set in `inc/api_config.php`) instead of remaining NULL.

- Upsert behavior on save:
  - Creates a new doctor if not found by unique key.
  - If a matching row exists the helper compares provided columns: if all provided columns match existing data the call is "skipped"; if any provided column differs the row is updated.
  - Unique criteria: registration_no (if provided) else name+phone+hospital.

1) List doctors
- Method: GET
- URL: https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=list
- Query params:
  - user_id (optional): return doctors added by this user. If omitted and you are authenticated, returns doctors added by the current session user.
  - all=1 (optional): if viewer role is `master` and all=1, returns all doctors.
- Authentication: session/token/secret as above (listing typically requires authentication unless you expose it publicly).
- Response example:
  { "success": true, "data": [ { /* doctor columns + added_by_username */ }, ... ] }

2) Get single doctor
- Method: GET
- URL: https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=get&id=<id>
- Response example:
  { "success": true, "data": { /* doctor columns + added_by_username */ } }

3) Create / Save doctor (upsert)
- Method: POST
- URL: https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=save
- Auth: any of the accepted auth methods above; if no auth supplied API still inserts but uses `PATHO_API_DEFAULT_USER_ID` for `added_by` when configured.
- Content-Type: application/json or application/x-www-form-urlencoded
- Body keys (provided fields are compared during upsert):
  - name (required)
  - qualification
  - specialization
  - hospital
  - contact_no
  - phone
  - email
  - address
  - registration_no
  - percent
  - added_by
- Notes:
  - Client-supplied `id` is ignored for new inserts (if `id` is present and numeric it's treated as update).
  - `added_by` is controlled server-side (clients may not set it unless the authenticated user role is master/admin and submits `added_by`).
  - Upsert returns an `action` of `inserted`, `updated`, or `skipped` and the `id`.
- Successful response example:
  { "success": true, "message": "Doctor inserted", "id": 123 }

4) Update doctor (edit)
- Method: POST
- URL: https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=save
- Body: include id=<existing id> plus fields to update
- Behavior: if id present and numeric, API updates that doctor and returns {success:true,message:'Doctor updated',id:<id>}

5) Delete doctor
- Method: POST
- URL: https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=delete
- Body: id=<id>
- Auth/permission: only master/admin or the creator (added_by) can delete
- Response: {"success":true,"message":"Doctor deleted"}

```plaintext
Doctor API - patho_api/doctor.php

Base URL:
https://hospital.codeapka.com/umakant/patho_api/doctor.php

Supported actions: list, get, save, delete

Summary of important behavior (current implementation):
- Authentication accepted:
  - Session cookie (PHPSESSID)
  - Bearer token via Authorization: Bearer <api_token> (users.api_token)
  - api_key request parameter
  - username/password in the same request (form-data or JSON) as a credential fallback
  - Shared secret via X-Api-Key header or secret_key param (server-to-server)
  - If no authenticated user is found the API still allows inserts; when configured the server will use `PATHO_API_DEFAULT_USER_ID` as the `added_by` fallback so inserted rows have a sensible creator instead of NULL.

- Upsert behavior on save:
  - Creates a new doctor if not found by unique criteria.
  - If a matching row exists the helper compares provided columns. If all provided columns match existing data the call is `skipped`; if any provided column differs the row is updated.
  - Unique criteria used by the API when saving:
    - If `registration_no` is provided and non-empty, it is used as the unique key.
    - Otherwise the API matches on `name` + `contact_no` + `hospital`. The `contact_no` field is preferred; if `contact_no` is empty the API falls back to `phone` for that comparison.
  - The upsert helper will NOT overwrite an existing `added_by` value. If an existing row has an empty `added_by`, the helper may fill it with the incoming `added_by` (or configured default) so older rows can be backfilled.

Returned columns (list/get):
- id, server_id, name, qualification, specialization, hospital,
  contact_no, phone, email, address, registration_no, percent,
  added_by, created_at, updated_at, added_by_username (joined from users.username when available)

1) List doctors
- Method: GET
- URL: https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=list
- Query params:
  - user_id (optional): return doctors added by this user. If omitted and you are authenticated, the API returns doctors added by the current authenticated user.
  - all=1 (optional): if the viewer role is `master` and all=1, returns all doctors.
- Authentication: session/token/secret as above (listing typically requires authentication unless your server exposes it publicly).
- Response example:
  { "success": true, "data": [ { /* doctor columns + added_by_username */ }, ... ] }

2) Get single doctor
- Method: GET
- URL: https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=get&id=<id>
- Response example:
  { "success": true, "data": { /* doctor columns + added_by_username */ } }

3) Create / Save doctor (upsert)
- Method: POST
- URL: https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=save
- Auth: any accepted auth method above; if no auth supplied the API still inserts but uses `PATHO_API_DEFAULT_USER_ID` for `added_by` when configured.
- Content-Type: application/json or application/x-www-form-urlencoded
- Body keys (provided fields are compared during upsert):
  - name (required)
  - server_id (optional integer) â€” useful for syncing records from another server
  - qualification
  - specialization
  - hospital
  - contact_no
  - phone
  - email
  - address
  - registration_no
  - percent (numeric; empty string treated as NULL)
  - added_by (only respected if the authenticated user has role master/admin)

Notes for save:
- Client-supplied `id` is treated as an update (if numeric). For new inserts any `id` sent by the client is ignored.
- When updating by `id`, the API preserves the existing `added_by` value.
- `added_by` is controlled server-side: only master/admin may set it explicitly in the request. For secret/anonymous insert flows the configured `PATHO_API_DEFAULT_USER_ID` is used when present.
- Upsert returns an `action` of `inserted`, `updated`, or `skipped` and the `id` of the affected row.
- Successful response example:
  { "success": true, "message": "Doctor inserted", "id": 123 }

Example JSON create (using shared secret):
Headers:
  X-Api-Key: <PATHO_API_SECRET>
  Content-Type: application/json
Body:
  { "name":"Dr A","registration_no":"REG-1","server_id":456 }

4) Update doctor (edit)
- Method: POST
- URL: https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=save
- Body: include id=<existing id> plus fields to update
- Behavior: if id present and numeric, API updates that doctor (sets updated_at = NOW()) and returns {success:true,message:'Doctor updated',id:<id>}

5) Delete doctor
- Method: POST
- URL: https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=delete
- Body: id=<id>
- Auth/permission: only master/admin or the creator (added_by) can delete
- Response: {"success":true,"message":"Doctor deleted"}

Quick Postman/PowerShell examples
- Login (to get session cookie):
  POST https://hospital.codeapka.com/umakant/login.php  (form: username, password, ajax=1)

- Create using secret header (server-to-server):
  POST https://hospital.codeapka.com/umakant/patho_api/doctor.php?action=save
  Headers: X-Api-Key: <PATHO_API_SECRET>, Content-Type: application/json
  Body: { "name":"Dr A","registration_no":"REG-1","server_id":456 }

Notes
- Make sure `PATHO_API_DEFAULT_USER_ID` is set on the server (env or `inc/api_config.php`) if you want server-side inserts to record a non-null `added_by`.
- If you need a Postman collection JSON for direct import I can generate `doctor.postman_collection.json` reflecting the above examples.

```
